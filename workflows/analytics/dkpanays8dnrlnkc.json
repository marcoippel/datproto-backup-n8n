{
  "nodes": [
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        }
      },
      "id": "c8193cda-018e-43b8-9c73-318d23f9c31b",
      "name": "Cron (every 1 min)",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        1024,
        144
      ]
    },
    {
      "parameters": {
        "chatId": "${TELEGRAM_CHAT_ID}",
        "text": "=prijsalert | Huidige (1m close): ${{$json.current}} Drempel: ${{$json.expected}} ({{$json.direction}})⏱️ {{$json.triggered_at}} Grafiek: https://www.tradingview.com/chart/?symbol={{$json.symbol}}",
        "additionalFields": {}
      },
      "id": "52a7e263-5c29-43a4-90c9-eb5e66a2c593",
      "name": "Telegram → Send Message",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        2976,
        160
      ],
      "webhookId": "3283d9a0-d8b4-4e45-888e-e2dbcf8314a3",
      "credentials": {
        "telegramApi": {
          "id": "iKtTM6paYduvyNoQ",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.alpaca.markets/v2/clock",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "APCA-API-KEY-ID",
              "value": "={{ $json['APCA-API-KEY-ID'] }}"
            },
            {
              "name": "APCA-API-SECRET-KEY",
              "value": "={{ $json['APCA-API-SECRET-KEY'] }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1376,
        144
      ],
      "id": "15e5b32f-a5bc-4ea3-a557-dc14903eff2e",
      "name": "HTTP Request",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "jsCode": "const data = items[0].json;\nif (!data || typeof data.is_open === 'undefined') \n{ \n  return []; \n}\n\nif (data.is_open === true) \n{ \n  return items; \n}\n\nreturn []; // markt dicht → stop"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1584,
        144
      ],
      "id": "c5b7f20f-679b-4a7f-9e46-305934715748",
      "name": "Code"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "select id, symbol, target_price::float8 as target_price, direction, window_minutes, active, last_notified_at\nfrom watchlist\nwhere active = true;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1776,
        144
      ],
      "id": "ed6f6e74-1be9-4235-81c3-1803bd90c354",
      "name": "Postgres → Load Watchlist1",
      "alwaysOutputData": false,
      "credentials": {
        "postgres": {
          "id": "yRnu83irRm57K8JO",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "61999137-5e74-43f5-9502-25075ddbde45",
              "name": "APCA-API-KEY-ID",
              "value": "${ALPACA_API_KEY_ID}",
              "type": "string"
            },
            {
              "id": "80c1a109-5828-467e-a510-296d8a10f0fc",
              "name": "APCA-API-SECRET-KEY",
              "value": "${ALPACA_API_SECRET_KEY}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1200,
        144
      ],
      "id": "a0ddebdf-bbb5-4266-a7f7-2a9ab7bca3b7",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "update watchlist\nset last_notified_at = now()\nwhere id = {{ $('Check vs Target + Debounce').item.json.id }};",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3248,
        160
      ],
      "id": "adfa2a81-35f5-4e0d-974a-3fb1e3a5ee49",
      "name": "Postgres → Set last_notified_at1",
      "credentials": {
        "postgres": {
          "id": "yRnu83irRm57K8JO",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2032,
        144
      ],
      "id": "1ccc37ff-348d-4432-b033-75566d1b83a3",
      "name": "Loop Over Items",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "url": "=https://data.alpaca.markets/v2/stocks/{{$json.symbol}}/bars?timeframe=1Min&limit=1",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "APCA-API-KEY-ID",
              "value": "={{ $('Edit Fields').item.json['APCA-API-KEY-ID'] }}"
            },
            {
              "name": "APCA-API-SECRET-KEY",
              "value": "={{ $('Edit Fields').item.json['APCA-API-SECRET-KEY'] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "06ea3a3d-43b3-4293-bab2-9b3ee1f0152d",
      "name": "Alpaca → Latest 1m Bar1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2320,
        144
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "// Verwacht exact 2 input-items: [ AlpacaBars, DbRow ]\nconst [alpaca, db] = $input.all().map(i => i.json);\n\n// Veilig de waarden pakken\nconst bar = Array.isArray(alpaca?.bars) ? alpaca.bars[0] : null;\nconst close = Number(bar?.c);\nconst barTime = bar?.t ?? null;\n\nif (!isFinite(close)) return [];\n\n// Doel & richting uit DB\nconst expected = Number(db?.target_price);\nconst direction = String(db?.direction || '').toLowerCase();\nconst symbol = String(db?.symbol);\nconst now = new Date();\n\nlet hit = false;\nswitch (direction) {\n  case 'at_or_above':\n    hit = close >= expected;\n    break;\n  case 'at_or_below':\n    hit = close <= expected;\n    break;\n  default:\n    // Onbekende direction -> niets doen\n    return [];\n}\n\n// Debug logs\nconsole.log('direction:', direction);\nconsole.log('close:', close);\nconsole.log('expected:', expected);\nconsole.log('hit:', hit);\nconsole.log('symbol:', symbol);\n\nif (!hit) return [];\n\n// Debounce met window_minutes + last_notified_at uit DB\nconst windowMin = Number(db?.window_minutes || 60);\nif (db?.last_notified_at) {\n  const last = new Date(db.last_notified_at).getTime();\n  const diffMin = (now.getTime() - last) / 60000;\n  console.log('diffMin ' + diffMin)\n  if (diffMin < windowMin) return [];\n}\n\n// Output gecombineerd item voor vervolgstappen (Telegram + DB update)\nreturn [{\n  json: {\n    id: db.id,\n    symbol: db.symbol,\n    current: close,\n    expected,\n    direction,\n    window_minutes: windowMin,\n    bar_time: barTime,\n    triggered_at: now.toISOString()\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2704,
        160
      ],
      "id": "440b5e30-4aa9-4e76-9c3b-a693ff860bdc",
      "name": "Check vs Target + Debounce",
      "alwaysOutputData": false
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2496,
        320
      ],
      "id": "70ab5dec-33f6-47ac-bdc4-965b55ad47ee",
      "name": "Merge"
    }
  ],
  "connections": {
    "Cron (every 1 min)": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Postgres → Load Watchlist1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres → Load Watchlist1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram → Send Message": {
      "main": [
        [
          {
            "node": "Postgres → Set last_notified_at1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Alpaca → Latest 1m Bar1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Alpaca → Latest 1m Bar1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Check vs Target + Debounce",
            "type": "main",
            "index": 0
          },
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check vs Target + Debounce": {
      "main": [
        [
          {
            "node": "Telegram → Send Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres → Set last_notified_at1": {
      "main": [
        []
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true
  }
}
