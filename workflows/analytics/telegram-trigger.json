{
  "nodes": [
    {
      "parameters": {
        "url": "https://api.twelvedata.com/time_series",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $json.message.text }}"
            },
            {
              "name": "interval",
              "value": "1min"
            },
            {
              "name": "outputsize",
              "value": "100"
            },
            {
              "name": "apikey",
              "value": "d4e41e377d9d41a59eb99dc41b8f3fd8"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        0,
        0
      ],
      "id": "5cc35d20-cef3-489e-b2ca-a7fabbdbf29b",
      "name": "HTTP 1M"
    },
    {
      "parameters": {
        "url": "https://api.twelvedata.com/time_series",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $json.message.text }}"
            },
            {
              "name": "interval",
              "value": "15min"
            },
            {
              "name": "outputsize",
              "value": "100"
            },
            {
              "name": "apikey",
              "value": "d4e41e377d9d41a59eb99dc41b8f3fd8"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        0,
        192
      ],
      "id": "25d338b9-836c-4d51-99a5-3dabb08f8a06",
      "name": "HTTP 15M"
    },
    {
      "parameters": {
        "url": "https://api.twelvedata.com/time_series",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $json.message.text }}"
            },
            {
              "name": "interval",
              "value": "1h"
            },
            {
              "name": "outputsize",
              "value": "100"
            },
            {
              "name": "apikey",
              "value": "d4e41e377d9d41a59eb99dc41b8f3fd8"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        0,
        384
      ],
      "id": "82f3655b-1d26-4a47-8237-fdc1b2c838ec",
      "name": "HTTP 1H"
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        224,
        176
      ],
      "id": "6bf043a8-5552-4ea0-b380-f05bfafe79de",
      "name": "Merge"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        448,
        192
      ],
      "id": "e124fcc7-15f4-45ff-9199-e4faa2462847",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "jsCode": "const root = items[0].json\nconst data1m = root.data[0]\nconst data15m = root.data[1]\nconst data1h = root.data[2]\n\nfunction normalize(values) {\n  return values.map(v => ({\n    time: new Date(v.datetime),\n    open: parseFloat(v.open),\n    high: parseFloat(v.high),\n    low: parseFloat(v.low),\n    close: parseFloat(v.close),  \n    volume: parseFloat(v.volume)\n  })).sort((a, b) => a.time - b.time);\n}\n\nreturn [\n  {\n    json:{\n      ticker: data1m.meta.symbol,\n      candles1m: normalize(data1m.values),\n      candles15m: normalize(data15m.values),\n      candles1h: normalize(data1h.values),\n    }\n  }\n]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        768,
        192
      ],
      "id": "00d032ef-591f-4282-bade-88490e02f53d",
      "name": "Code"
    },
    {
      "parameters": {
        "url": "https://newsapi.org/v2/everything",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ $json.message.text }}"
            },
            {
              "name": "from",
              "value": "={{$today.minus({days: 1}).toFormat('yyyy-MM-dd')  }}"
            },
            {
              "name": "apiKey",
              "value": "dcd1675552fe48ec8d63fb0bcb2d9563"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        448,
        528
      ],
      "id": "aaef65e7-6192-4a05-987d-d0752293f050",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -224,
        272
      ],
      "id": "57b218c7-baf1-4ddd-8862-2faa4940ef02",
      "name": "Telegram Trigger",
      "webhookId": "ec00d41f-e0e1-4abf-8b9f-392bae1a3e28",
      "credentials": {
        "telegramApi": {
          "id": "MoBgowLuGb9E5EZx",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "GPT-4.1-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=You are a highly intelligent and\naccurate sentiment analyzer\nspecializing in the financial\nmarkets. Analyze the sentiment of\nthe provided text\n- Evaluate the immediate market\nreaction, recent news impact, and\ntechnical volatility.\n- Determine a sentiment\ncategory: \"Positive\", \"Neutral\", or\n\"Negative\".\n- Calculate a numerical score\nbetween -1 (extremely negative) and\n1 (extremely positive).\n- Provide a concise rationale\nexplaining the short-term sentiment\n(give a detailed response with\nappropriate headlines for major\n\nYour output must be exactly a JSON\nobject. The value must be an\nobject with three keys: \"category\",\n\"score\", and \"rationale\". DO not\noutput any additional text.\n\nFor example, your output should\nlook like:\n\n{\n\t\"shortTermSentinent\": {\n\t\t\"category\": \"Positive\",\n\t\t\"score\": 0.7,\n\t\t\"rationale\": \"....\"\n\t\t\nNow, analyze the following text and\nproduce your output:\n{{ JSON.stringify($json.articles) }}"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        672,
        528
      ],
      "id": "90e13f1e-44c9-4f5d-ac46-c71049999158",
      "name": "Message a model",
      "credentials": {
        "openAiApi": {
          "id": "QcHLLLip3Bt0ahCp",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1072,
        368
      ],
      "id": "941f0d4b-6911-4515-ad75-d6ceeab91a2d",
      "name": "Merge1"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1296,
        368
      ],
      "id": "73a293c1-fe50-4996-b6af-145294b34ea6",
      "name": "Aggregate1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an expert day trader. Using\nthe data below, please give a\nsingle, unified trade reconnendation\n—Buy, Sell, or Hold—based on both\nprice action (1m, 15m, 1h candles)\nand 24h sentiment. Then provide:\n\n• Technical Recomendation (Buy,\nSell, or Hold; incorporating candle\nanalysis and sentiment)\n• Entry Price\n• Stop-Loss\n• Target/Exit Price\n\nProvide your answer as plain text\nwith bullet points and clear line\nbreaks.\n\nTechnical Data (candles):\n{{ JSON.stringify($json.data[0]) }}\n\nSentiment Analysis (past 24h):\n{{ JSON.stringify($json.data[1]) }}\n\nEach candle object has:\n- timeframe: \"lm\", \"15m\", or \"1h\"\n- candles: [openTime, open, high,\nlow, close, volume, ...]\n\nSteps for the agent:\n1. Group candles by timeframe (1m,\n15m, 1h).\n2. Use 1m & 15m action + indicators\n(RSI, MACD, trendlines) for optimal\nentry.\n3. Confirm trend with lh data.\n4. Factor in sentiment to refine\nthe Buy/Sell/Hold call.\n\n### Response format (no extra\ntext!):\n• Technical Recommendation:\n<BUY|SELL|HOLD>\n• Entry Price: <number>\n• Stop-Loss: <number>\n• Target/Exit Price: <number>",
        "options": {
          "systemMessage": "You are an expert day trader. ONLY\noutput exactly the lines below-no\nrationale, no extra commentary.\n\n### Response format (absolutely no\nother text!)\n• Technical Recommendation:\n<BUY|SELL|HOLD>\n• Entry Price: <number or N/A>\n• Stop-Loss: <number or N/A>\n• Target/Exit: <number or N/A>\n• Hold or Exit Decision: <Hold|Exit>"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        1520,
        368
      ],
      "id": "1975f88d-9271-4ad2-8447-f921a1473e73",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1616,
        592
      ],
      "id": "eb769b7e-8faf-4c00-b30d-6e8fde44dae3",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "QcHLLLip3Bt0ahCp",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1920,
        368
      ],
      "id": "82178d67-e9de-46fe-90d8-8087a283be54",
      "name": "Send a text message",
      "webhookId": "d404dd00-8cb3-47ea-83ef-4b4351ce9406",
      "credentials": {
        "telegramApi": {
          "id": "MoBgowLuGb9E5EZx",
          "name": "Telegram account 2"
        }
      }
    }
  ],
  "connections": {
    "HTTP 1H": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "HTTP 15M": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "HTTP 1M": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "HTTP 1M",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP 15M",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP 1H",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Aggregate1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {
    "Message a model": [
      {
        "json": {
          "index": 0,
          "message": {
            "role": "assistant",
            "content": {
              "shortTermSentinent": {
                "category": "Neutral",
                "score": 0,
                "rationale": "The provided texts are mixed with mildly positive and negative investor actions and neutral earnings outlooks. Positive indicators include strong bank sector earnings and increased holdings in Apple by some investors, suggesting confidence in specific sectors. However, this is balanced by reduction in Apple stock by other investors and neutral analyst ratings on Intel ahead of earnings. Additionally, there is no indication of significant technical volatility or immediate market shock. Therefore, the short-term sentiment across these financial market updates is balanced, reflecting a neutral stance."
              }
            },
            "refusal": null,
            "annotations": []
          },
          "logprobs": null,
          "finish_reason": "stop"
        }
      }
    ]
  },
  "meta": {
    "templateCredsSetupCompleted": true
  }
}
